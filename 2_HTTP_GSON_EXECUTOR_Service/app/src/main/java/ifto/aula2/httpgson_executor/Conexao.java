package ifto.aula2.httpgson_executor;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;

public class Conexao { // retrofit
    public InputStream obterRespostaHTTP(String url) {
        try {
            /**
             * Representa um URL ‚Äî Localizador Uniforme de Recursos (Uniform Resource Locator),
             * que funciona como um "endere√ßo" para localizar recursos dispon√≠veis na internet (World Wide Web).
             *
             * Um recurso pode ser algo simples, como um arquivo HTML, uma imagem ou um diret√≥rio,
             * ou algo mais complexo, como uma API, uma consulta a banco de dados, ou um mecanismo de busca.
             *
             * A classe URL permite acessar e manipular essas informa√ß√µes de forma estruturada (protocolo, host, caminho, etc).
             *
             * Exemplo de formatos v√°lidos:
             * - http://www.exemplo.com/index.html
             * - https://api.site.com/usuarios?id=10
             * - ftp://servidor.com/arquivo.txt
             *
             * Para mais detalhes sobre os tipos de URL e seus formatos, consulte:
             * {@link <a href="http://web.archive.org/web/20051219043731/http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/Demo/url-primer.html">este guia de URLs e seus formatos</a>}.
             */
            URL urlConexao = new URL(url);//Cria o objeto URL

            /**
             * Retorna uma inst√¢ncia de HttpURLConnection  que representa uma conex√£o HTTP com o objeto remoto referenciado pela URL.
             *
             * Embora o m√©todo openConnection() da classe URL retorne uma inst√¢ncia da classe URLConnection (que √© gen√©rica),
             * neste caso, sei que a URL utilizada representa uma conex√£o HTTP (por exemplo, come√ßa com "http://" ou "https://").
             *
             * A classe URLConnection √© abstrata e serve como superclasse para diferentes tipos de conex√µes, como HTTP, FTP, etc.
             *
             * Como desejo trabalhar com funcionalidades espec√≠ficas do protocolo HTTP ‚Äî como definir o m√©todo da requisi√ß√£o (GET, POST),
             * configurar cabe√ßalhos (headers), e obter o c√≥digo de resposta HTTP ‚Äî fa√ßo um "cast" para HttpURLConnection.
             *
             * HttpURLConnection √© uma subclasse de URLConnection voltada exclusivamente para conex√µes HTTP,
             * permitindo acessar m√©todos que n√£o est√£o dispon√≠veis na superclasse.
             *
             * Com isso, tenho acesso completo √†s ferramentas necess√°rias para manipular a conex√£o HTTP de forma apropriada.
             */
            HttpURLConnection conexao = (HttpURLConnection) urlConexao.openConnection(); // prepara a conexao logo apos criar a url mas nao realiza a conexao

            /** Defina o m√©todo para a solicita√ß√£o de URL (Define o m√©todo HTTP da requisi√ß√£o), um dos seguintes: GET POST HEAD OPTIONS PUT DELETE TRACE s√£o legais, sujeitos a restri√ß√µes de protocolo.
             *
             *  Cada m√©todo tem um prop√≥sito diferente na comunica√ß√£o HTTP:
             *  - GET: Recupera dados do servidor (sem corpo de requisi√ß√£o).
             *  - POST: Envia dados ao servidor (usado, por exemplo, para formul√°rios).
             *  - PUT: Atualiza completamente um recurso.
             *  - DELETE: Remove um recurso.
             *  - HEAD: Recupera apenas os cabe√ßalhos da resposta (sem o corpo).
             *  - OPTIONS: Solicita os m√©todos suportados pelo servidor.
             *  - TRACE: Ecoa a requisi√ß√£o recebida (pouco usado).
             *  Importante: Nem todos os servidores aceitam todos os m√©todos ‚Äî isso depende das permiss√µes e da implementa√ß√£o no backend.
             */
            conexao.setRequestMethod("GET");// Define par√¢metros da requisi√ß√£o


            /**
             * BufferedInputStream √© uma classe do Java que adiciona uma camada de **buffer** (mem√≥ria tempor√°ria)
             * sobre um InputStream existente ‚Äî como o que obtemos ao chamar `conexao.getInputStream()`.
             *
             *  O que √© "buffer" aqui?
             * √â uma √°rea de armazenamento tempor√°ria em mem√≥ria que permite **ler dados em blocos maiores de uma vez**,
             * ao inv√©s de ler **byte por byte** diretamente da fonte (como um arquivo ou uma conex√£o).
             *
             *  Benef√≠cios do uso:
             * - Melhora a **performance da leitura**, reduzindo o n√∫mero de acessos √† fonte de dados.
             * - Oferece suporte aos m√©todos `mark()` e `reset()`, que permitem marcar um ponto no fluxo e retornar a ele depois.
             *
             * üõ† Como funciona:
             * - Quando o `BufferedInputStream` √© criado, ele aloca um **array interno de bytes** (o buffer).
             * - √Ä medida que os dados s√£o lidos com `.read()`, o buffer √© preenchido com **v√°rios bytes de uma s√≥ vez**.
             * - Quando o buffer esvazia, ele √© automaticamente reabastecido a partir do fluxo original (`InputStream`).
             *
             *  Dica:
             * - Use `BufferedInputStream` quando for ler **grandes quantidades de dados** (como arquivos, respostas HTTP ou streams da rede).
             * - O tamanho padr√£o do buffer √© 8192 bytes, mas voc√™ pode definir outro se quiser: `new BufferedInputStream(stream, tamanhoBuffer)`.
             *
             * Sobre `mark()` e `reset()`:
             * - `mark(int readlimit)`: marca um ponto no fluxo. Pode usar `reset()` depois para voltar a esse ponto.
             * - √ötil em situa√ß√µes em que voc√™ quer "testar" os dados antes de continuar, como ao identificar o tipo de conte√∫do recebido.
             *
             * Exemplo:
             * return new BufferedInputStream(conexao.getInputStream());
             * Aqui, a conex√£o HTTP fornece um InputStream e o BufferedInputStream melhora o desempenho da leitura.
             */
            //getInputStream() retorna um InputStream que representa o corpo da resposta HTTP recebida da conex√£o estabelecida. - Envia a requisi√ß√£o, abre conex√£o real, retorna dados
            return new BufferedInputStream(conexao.getInputStream());

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (ProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            // Tratamento de exce√ß√£o para erros de entrada/sa√≠da
            e.printStackTrace();
        }
        return null;
    }

    /**
     * M√©todo respons√°vel por converter o conte√∫do de um InputStream (fluxo de entrada de dados, como resposta de uma requisi√ß√£o)
     * em uma √∫nica String, com quebras de linha preservadas.
     *
     * Esse tipo de leitura √© comum ao lidar com APIs, leitura de arquivos ou comunica√ß√£o em rede.
     */
    public String converter(InputStream inputStream) {
        // InputStreamReader √© usado para converter o fluxo de bytes (InputStream) em caracteres (leitura de texto).
        // Ele atua como uma "ponte" entre dados bin√°rios e texto leg√≠vel.
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);

        // BufferedReader adiciona um buffer (√°rea tempor√°ria de leitura) ao InputStreamReader.
        // Isso torna a leitura mais eficiente, pois l√™ blocos de dados em vez de caractere por caractere.
        // Tamb√©m permite utilizar o m√©todo readLine(), que l√™ linha por linha.
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

        // StringBuilder √© usado para construir a String final de forma eficiente, evitando uso de concatena√ß√£o com "+".
        StringBuilder stringBuilder = new StringBuilder();

        String linha; // Vari√°vel para armazenar cada linha lida do BufferedReader.
        try {
            // Enquanto ainda houver linhas para ler (readLine() retorna null no final do fluxo),
            // adiciona a linha lida ao StringBuilder e tamb√©m uma quebra de linha (\n), pois readLine() remove isso.
            while ((linha = bufferedReader.readLine()) != null) {
                stringBuilder.append(linha);
                stringBuilder.append("\n");
            }
        } catch (IOException e) {
            // Captura qualquer exce√ß√£o de entrada/sa√≠da que possa ocorrer durante a leitura do fluxo.
            e.printStackTrace();
            return null; // Retorna null em caso de erro.
        }

        // Retorna o conte√∫do completo do InputStream convertido em String.
        return stringBuilder.toString();
    }

}